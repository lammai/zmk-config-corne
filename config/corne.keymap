/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        TAP_DANCE: TAP_DANCE {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 22 21 20 19 18 30 31 32 33 34 41 39 36 38 40 37>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 38 39 41 37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q  &kp W            &kp E                &kp R            &kp T        &kp Y      &kp U             &kp I                   &kp O                         &TAP_DANCE APOS P  &none
&none  &kp A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_GUI F  &kp G        &kp H      &hmr RIGHT_GUI J  &hmr RIGHT_CONTROL K    &hmr RIGHT_ALT L              &kp BACKSPACE      &none
&none  &kp Z  &kp X            &kp C                &kp V            &kp B        &kp N      &kp M             &TAP_DANCE MINUS COMMA  &TAP_DANCE UNDERSCORE PERIOD  &kp SLASH          &none
                               &sk LEFT_SHIFT       &lt 2 TAB        &kp SPACE    &kp SPACE  &lt 1 ESCAPE      &kp ENTER
            >;
        };

        lower_layer {
            bindings = <
&none  &kp GRAVE  &kp F1            &kp F2                &kp F3            &kp F4       &kp MINUS  &kp N7                   &kp N8                       &kp N9                   &kp DEL    &none
&none  &kp TILDE  &hml LEFT_ALT F5  &hml LEFT_CONTROL F6  &hml LEFT_GUI F7  &kp F8       &kp PLUS   &hmr RIGHT_GUI NUMBER_4  &hmr RIGHT_CONTROL NUMBER_5  &hmr RIGHT_ALT NUMBER_6  &trans     &none
&none  &none      &kp F9            &kp F10               &kp F11           &kp F12      &kp N0     &kp N1                   &kp N2                       &kp N3                   &kp EQUAL  &none
                                    &trans                &trans            &kp SPACE    &kp SPACE  &trans                   &trans
            >;
        };

        raise_layer {
            bindings = <
&none  &kp ESCAPE  &kp PRINTSCREEN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PAGE_UP      &kp UNDER      &kp AMPERSAND    &kp ASTERISK  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES          &none
&none  &kp TAB     &kp INS          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PAGE_DOWN    &kp SEMICOLON  &kp DOLLAR       &kp PERCENT   &kp CARET         &kp COLON                  &none
&none  &none       &kp END          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp HOME         &kp PIPE       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH          &TAP_DANCE PIPE BACKSLASH  &none
                                    &trans                &trans                 &kp SPACE        &kp SPACE      &trans           &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &mkp RCLK        &mmv MOVE_UP      &mkp LCLK          &mwh SCROLL_UP   &kp RC(T)  &kp LC(LS(TAB))  &kp UP    &kp LC(TAB)  &kp RC(W)  &none
&none  &none  &mmv MOVE_LEFT   &mmv MOVE_DOWN    &mmv MOVE_RIGHT    &mwh SCROLL_DOWN &none      &kp LEFT         &kp DOWN  &kp RIGHT    &none      &none
&none  &to 6  &mwh SCROLL_LEFT &mkp MCLK         &mwh SCROLL_RIGHT  &none            &none      &none            &none     &none        &to 4      &none
                               &none             &none              &none            &none      &none            &none
            >;
        };

        Gaming {
            bindings = <
&none   &kp ESC    &kp Q  &kp W  &kp E    &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LSHFT  &kp A  &kp S  &kp D    &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL  &kp Z  &kp X  &kp C    &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                          &mo 5  &kp TAB  &kp SPACE    &trans  &to 0   &trans
            >;
        };

        Gaming_sublayer {
            bindings = <
&none  &kp N1  &kp N2  &trans  &kp NUMBER_3  &kp N4    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp T   &trans  &trans  &trans        &kp G     &trans  &trans  &trans  &trans  &trans  &none
&none  &kp Y   &kp N   &kp M   &kp B         &kp L     &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans        &trans    &trans  &trans  &trans
            >;
        };

        sys_config {
            bindings = <
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &out OUT_BLE  &out OUT_USB  &none  &ext_power EP_TOG  &none  &none
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &sys_reset    &none         &none  &none              &none  &none
&none  &none          &none          &bt BT_CLR     &none          &none            &bootloader   &none         &none  &none              &none  &none
                                     &none          &none          &none            &none         &to 0         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
